#!/usr/bin/env bash
# üîß SETUP COMPREHENSIVE WATCHDOG SYSTEM
# Automated monitoring, restart, and alerting for both trading agents

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$ROOT_DIR"

echo "üîß SETTING UP COMPREHENSIVE WATCHDOG SYSTEM"
echo "============================================"
echo

# Create cron jobs for monitoring
echo "üìÖ Setting up cron jobs for automated monitoring..."

# Remove existing trading-related crons
crontab -l 2>/dev/null | grep -v -E "(hybrid|futures|watchdog|health_check)" | crontab - 2>/dev/null || true

# Create new comprehensive cron schedule
cat << 'EOF' | crontab -
# Confidence Engine Trading System Monitoring
# Generated by setup_comprehensive_monitoring.sh

# Watchdog: Check every 2 minutes, restart if needed
*/2 * * * * cd /Users/mouryadamarasing/Documents/Project-Tracer-Bullet && bash scripts/watchdog_hybrid.sh >/dev/null 2>&1
*/2 * * * * cd /Users/mouryadamarasing/Documents/Project-Tracer-Bullet && bash scripts/watchdog_futures.sh >/dev/null 2>&1

# Health check: Comprehensive check every 30 minutes
*/30 * * * * cd /Users/mouryadamarasing/Documents/Project-Tracer-Bullet && bash scripts/health_check.sh >/dev/null 2>&1

# Daily restart: Restart both agents at 6 AM daily for fresh start
0 6 * * * cd /Users/mouryadamarasing/Documents/Project-Tracer-Bullet && bash start_all_agents.sh >/dev/null 2>&1

EOF

echo "‚úÖ Cron jobs installed:"
echo "   - Watchdog checks every 2 minutes"
echo "   - Health checks every 30 minutes" 
echo "   - Daily restart at 6 AM"
echo

# Test connectivity check
echo "üåê Testing internet connectivity mechanism..."
CONNECTIVITY_TEST=$(python3 -c "
import requests
import socket

def check_connectivity():
    endpoints = [
        'https://httpbin.org/status/200',
        'https://api.binance.com/api/v3/ping',
        'https://www.google.com'
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(endpoint, timeout=5)
            if response.status_code in [200, 301, 302]:
                print(f'‚úÖ Connectivity OK via {endpoint}')
                return True
        except Exception as e:
            print(f'‚ùå Failed {endpoint}: {e}')
            continue
    
    # Socket test
    try:
        socket.create_connection(('8.8.8.8', 53), timeout=3)
        print('‚úÖ Socket connectivity OK (Google DNS)')
        return True
    except Exception as e:
        print(f'‚ùå Socket test failed: {e}')
    
    return False

if check_connectivity():
    print('üåê Internet connectivity: WORKING')
    exit(0)
else:
    print('üåê Internet connectivity: FAILED')
    exit(1)
")

echo "$CONNECTIVITY_TEST"
echo

# Test restart mechanism
echo "üîÑ Testing restart mechanism..."
echo "Hybrid agent running: $(pgrep -f 'python3 scripts/hybrid_crypto_trader.py' >/dev/null 2>&1 && echo 'YES' || echo 'NO')"
echo "Futures agent running: $(pgrep -f 'python3.*high_risk_futures_agent.py' >/dev/null 2>&1 && echo 'YES' || echo 'NO')"
echo

# Test notification system
echo "üì± Testing notification system..."
if [ "${TB_ENABLE_DISCORD:-0}" = "1" ] && [ -n "${DISCORD_WEBHOOK_URL:-}" ]; then
    echo "‚úÖ Discord notifications: CONFIGURED"
else
    echo "‚ö†Ô∏è  Discord notifications: NOT CONFIGURED"
fi

if [ "${TB_NO_TELEGRAM:-1}" = "0" ]; then
    echo "‚úÖ Telegram notifications: ENABLED"
else
    echo "‚ö†Ô∏è  Telegram notifications: DISABLED"
fi
echo

# Test log monitoring
echo "üìä Testing log monitoring..."
LOG_FILES=(
    "trader_loop.log"
    "trader_loop.err"
    "high_risk_futures_loop.log"
    "high_risk_futures_loop.err"
)

for log_file in "${LOG_FILES[@]}"; do
    if [ -f "$log_file" ]; then
        echo "‚úÖ $log_file: EXISTS"
    else
        echo "‚ö†Ô∏è  $log_file: MISSING (will be created on startup)"
    fi
done
echo

# Show comprehensive monitoring commands
echo "üìã COMPREHENSIVE MONITORING COMMANDS:"
echo "===================================="
echo
echo "# Real-time process monitoring:"
echo "watch 'ps aux | grep -E \"(hybrid_crypto_trader|high_risk_futures_agent)\" | grep -v grep'"
echo
echo "# Live log monitoring:"
echo "tail -f trader_loop.log high_risk_futures_loop.log"
echo
echo "# Check cron jobs:"
echo "crontab -l"
echo
echo "# Manual watchdog check:"
echo "bash scripts/watchdog_hybrid.sh"
echo "bash scripts/watchdog_futures.sh"
echo
echo "# Manual health check:"
echo "bash scripts/health_check.sh"
echo
echo "# Emergency stop all:"
echo "pkill -f 'python3.*hybrid_crypto_trader.py'"
echo "pkill -f 'python3.*high_risk_futures_agent.py'"
echo
echo "# Emergency restart all:"
echo "bash start_all_agents.sh"

echo
echo "üéØ WATCHDOG SYSTEM FEATURES:"
echo "============================="
echo "‚úÖ Automatic restart if agents crash"
echo "‚úÖ Internet connectivity monitoring"
echo "‚úÖ Log freshness monitoring"
echo "‚úÖ Process health monitoring"
echo "‚úÖ Discord/Telegram alerts"
echo "‚úÖ Daily automated restart"
echo "‚úÖ Comprehensive error recovery"
echo

echo "üöÄ WATCHDOG SYSTEM SETUP COMPLETE!"
echo "üí° Your trading agents now have comprehensive monitoring and auto-recovery"
